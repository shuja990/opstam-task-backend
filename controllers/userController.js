import asyncHandler from "express-async-handler";
import generateToken from "../utils/generateToken.js";
import User from "../models/userModel.js";
import Crypto from "crypto";
import nodemailer from "nodemailer";
import Joi from "joi";

// @desc    Auth user & get token
// @route   POST /api/users/login
// @access  Public
const authUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  const schema = Joi.object({
    password: Joi.string().min(8).required(),
    email: Joi.string()
      .email({ minDomainSegments: 2, tlds: { allow: ["com", "net"] } })
      .required(),
  });
  const value = await schema.validateAsync({ password: password, email: email });

  const user = await User.findOne({ email });

  if (user && (await user.matchPassword(password))) {
    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      isAdmin: user.isAdmin,
      token: generateToken(user._id),
    });
  } else {
    res.status(401);
    throw new Error("Invalid email or password");
  }
});

// @desc    Register a new user
// @route   POST /api/users
// @access  Public
const registerUser = asyncHandler(async (req, res) => {
  const { name, email } = req.body;

  const schema = Joi.object({
    name: Joi.string().min(3).max(30).required(),
    email: Joi.string()
      .email({ minDomainSegments: 2, tlds: { allow: ["com", "net"] } })
      .required(),
  });
  const value = await schema.validateAsync({ name: name, email: email });

  const userExists = await User.findOne({ email });

  if (userExists) {
    res.status(400);
    throw new Error("User already exists");
  }
  const password = Crypto.randomBytes(64).toString("hex");
  let transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
      user: "shujaali1234@gmail.com", // generated ethereal user
      pass: "gkttuwalguiyrdan",
    },
  });

  // send mail with defined transport object
  let info = await transporter.sendMail({
    from: "shujaali1234@gmail.com", // sender address
    to: email, // list of receivers
    subject: "Your password", // Subject line
    html: `
    <body>
    <h3>Your autogenerated password</h3>
    <p>Your autogenerated password is ${password}</p>
    </body>
    `,
  });
  const user = await User.create({
    name,
    email,
    password,
  });

  if (user) {
    res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      password:password,
      isAdmin: user.isAdmin,
    });
  } else {
    res.status(400);
    throw new Error("Invalid user data");
  }
});

export { authUser, registerUser };
